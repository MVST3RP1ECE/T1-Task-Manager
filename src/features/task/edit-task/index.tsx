import { Button } from '@/shared/ui/button'
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from '@/shared/ui/dialog'
import { Label } from '@/shared/ui/label'
import {
    Select,
    SelectContent,
    SelectGroup,
    SelectItem,
    SelectLabel,
    SelectTrigger,
    SelectValue,
} from '@/shared/ui/select'
import { Textarea } from '@/shared/ui/textarea'
import { useNavigate, useParams } from 'react-router'
import { useForm, Controller } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { useStore } from '@/app/stores/store'
import { schema, type TFormSchema } from '@/shared/lib/zod'
import RemoveTask from '../remove-task'

function EditTask() {
    const { id } = useParams()
    const taskToEdit = useStore((state) => state.tasks.find((task) => task.id === id))
    const updateTask = useStore((state) => state.updateTask)
    const navigate = useNavigate()

    // type narrowing. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, –≤ defaultValues
    if (
        taskToEdit?.priority === undefined ||
        taskToEdit?.category === undefined ||
        taskToEdit?.status === undefined
    ) {
        return null
    }

    const {
        handleSubmit,
        control,
        formState: { errors },
    } = useForm<TFormSchema>({
        resolver: zodResolver(schema),
        defaultValues: {
            id: `${taskToEdit?.id}`,
            header: `${taskToEdit?.header}`,
            description: `${taskToEdit?.description}`,
            priority: `${taskToEdit?.priority}`,
            category: `${taskToEdit?.category}`,
            status: `${taskToEdit?.status}`,
        },
    })

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    const onSubmit = (data: any) => {
        updateTask(taskToEdit.id, data)
        return navigate('/')
    }

    return (
        <section className="h-screen w-screen flex flex-col box-border items-center justify-center bg-neutral-300 overflow-auto">
            <Dialog>
                <form onSubmit={handleSubmit(onSubmit)}>
                    {/* –§–∏—á–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ */}
                    <RemoveTask />
                    {/* –§–∏—á–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ */}
                    <DialogTrigger asChild>
                        <Button className="hover:cursor-pointer" variant="outline">
                            –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                        </Button>
                    </DialogTrigger>

                    <DialogContent className="sm:max-w-[425px]">
                        <DialogHeader>
                            <DialogTitle>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</DialogTitle>
                            <DialogDescription>
                                –¢—É—Ç –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á—É
                            </DialogDescription>
                        </DialogHeader>
                        <div className="grid gap-4">
                            <div className="grid gap-3">
                                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ */}
                                <Label htmlFor="header">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</Label>
                                <Controller
                                    name="header"
                                    control={control}
                                    render={({ field }) => (
                                        <Textarea
                                            {...field}
                                            id="header"
                                            maxLength={25}
                                        />
                                    )}
                                />

                                {/* –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ */}
                                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</Label>
                                <Controller
                                    name="description"
                                    control={control}
                                    render={({ field }) => (
                                        <Textarea
                                            {...field}
                                            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                                            id="description"
                                            maxLength={250}
                                        />
                                    )}
                                />
                                {errors.description && (
                                    <p className="text-red-500">{errors.description.message}</p>
                                )}

                                {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ */}
                                <Label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏</Label>
                                <Controller
                                    name="priority"
                                    control={control}
                                    render={({ field }) => (
                                        <Select onValueChange={field.onChange} value={field.value}>
                                            <SelectTrigger className="w-[200px]">
                                                <SelectValue placeholder="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectGroup>
                                                    <SelectLabel>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</SelectLabel>
                                                    <SelectItem value="Low">üü¢ Low</SelectItem>
                                                    <SelectItem value="Medium">
                                                        üü° Medium
                                                    </SelectItem>
                                                    <SelectItem value="High">üî¥ High</SelectItem>
                                                </SelectGroup>
                                            </SelectContent>
                                        </Select>
                                    )}
                                />

                                {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ */}
                                <Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏</Label>
                                <Controller
                                    name="category"
                                    control={control}
                                    render={({ field }) => (
                                        <Select onValueChange={field.onChange} value={field.value}>
                                            <SelectTrigger className="w-[200px]">
                                                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectGroup>
                                                    <SelectLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</SelectLabel>
                                                    <SelectItem value="Bug">üêõ Bug</SelectItem>
                                                    <SelectItem value="Feature">
                                                        ‚ú® Feature
                                                    </SelectItem>
                                                    <SelectItem value="Documentation">
                                                        üìö Documentation
                                                    </SelectItem>
                                                    <SelectItem value="Refactor">
                                                        ‚ôªÔ∏è Refactor
                                                    </SelectItem>
                                                    <SelectItem value="Test">üõ†Ô∏è Test</SelectItem>
                                                </SelectGroup>
                                            </SelectContent>
                                        </Select>
                                    )}
                                />

                                {/* –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ */}
                                <Label>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏</Label>
                                <Controller
                                    name="status"
                                    control={control}
                                    render={({ field }) => (
                                        <Select onValueChange={field.onChange} value={field.value}>
                                            <SelectTrigger className="w-[200px]">
                                                <SelectValue placeholder="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectGroup>
                                                    <SelectLabel>–°—Ç–∞—Ç—É—Å</SelectLabel>
                                                    <SelectItem value="To Do">üìã To Do</SelectItem>
                                                    <SelectItem value="In Progress">
                                                        üîÑ In Progress
                                                    </SelectItem>
                                                    <SelectItem value="Done">‚úîÔ∏è Done</SelectItem>
                                                </SelectGroup>
                                            </SelectContent>
                                        </Select>
                                    )}
                                />
                            </div>
                        </div>
                        <DialogFooter>
                            <DialogClose asChild>
                                <Button className="hover:cursor-pointer" variant="outline">
                                    –û—Ç–º–µ–Ω–∏—Ç—å
                                </Button>
                            </DialogClose>
                            <Button
                                className="hover:cursor-pointer"
                                type="submit"
                                onClick={handleSubmit(onSubmit)}
                            >
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </form>
            </Dialog >
            <div>–ó–∞–¥–∞—á–∞ #{id}</div>
        </section >
    )
}

export default EditTask